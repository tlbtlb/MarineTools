# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BathyMorph
                                 A QGIS plugin
 Calculates Slope Contours and fills small gaps in bathymetry 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-03-10
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Dr Tim Le Bas, National Oceanography Centre, Southampton . UK
        email                : tim.lebas@noc.ac.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QAction,QFileDialog # added
from qgis.core import QgsProject # added

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .BathyMorph_dialog import BathyMorphDialog
import os.path
from qgis.core import Qgis,QgsMessageLog
from qgis.gui import QgsMessageBar

from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterRasterLayer
from qgis.core import QgsProcessingParameterRasterDestination
from qgis.core import QgsProcessingParameterDefinition
from qgis.core import QgsVectorLayer
from qgis.core import (QgsSymbol,QgsSimpleFillSymbolLayer,QgsRendererCategory,QgsCategorizedSymbolRenderer)
from qgis.core import QgsRasterLayer
from qgis.core import QgsRasterBandStats

import processing
import sys
import traceback
import os

class BathyMorph:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'BathyMorph_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Marine Tools')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('BathyMorph', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
            #self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/bathymorph/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Bathymetry Morphometry'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&Bathymetry morphometry'),
                action)
            self.iface.removeToolBarIcon(action)


    def select_input_file1(self): # added
        filename, _filter = QFileDialog.getOpenFileName(self.dlg, "Select input bathymetry file ","", '*.*') # added
        self.dlg.lineEdit_1.setText(filename) # added
        #autofill
        autoPoly = filename[:-4]+"_interp.img"
        self.dlg.lineEdit_2.setText(autoPoly)
        autoPoly = filename[:-4]+"_slope.img"
        self.dlg.lineEdit_3.setText(autoPoly)
        autoPoly = filename[:-4]+"_contours.shp"
        self.dlg.lineEdit_4.setText(autoPoly)
        autoPoly = filename[:-4]+"_roughness.img"
        self.dlg.lineEdit_5.setText(autoPoly)
        autoPoly = filename[:-4]+"_hires.img"
        self.dlg.lineEdit_6.setText(autoPoly)
    def select_input_file2(self): # added
        filename, _filter = QFileDialog.getOpenFileName(self.dlg, "Select output interpolated file ","", '*.*') # added
        self.dlg.lineEdit_2.setText(filename) # added
    def select_input_file3(self): # added
        filename, _filter = QFileDialog.getOpenFileName(self.dlg, "Select output slope file","", '*.*') # added
        self.dlg.lineEdit_3.setText(filename) # added
    def select_input_file4(self): # added
        filename, _filter = QFileDialog.getOpenFileName(self.dlg, "Select output contours shapefile","", '*.*') # added
        self.dlg.lineEdit_4.setText(filename) # added
    def select_input_file5(self): # added
        filename, _filter = QFileDialog.getOpenFileName(self.dlg, "Select output roughness file","", '*.*') # added
        self.dlg.lineEdit_5.setText(filename) # added
    def select_input_file5(self): # added
        filename, _filter = QFileDialog.getOpenFileName(self.dlg, "Select output high resolution file","", '*.*') # added
        self.dlg.lineEdit_5.setText(filename) # added

    def run(self):
        import random
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = BathyMorphDialog()
            self.dlg.pushButton_1.clicked.connect(self.select_input_file1) # added
            self.dlg.pushButton_2.clicked.connect(self.select_input_file2) # added
            self.dlg.pushButton_3.clicked.connect(self.select_input_file3) # added
            self.dlg.pushButton_4.clicked.connect(self.select_input_file4) # added
            self.dlg.pushButton_5.clicked.connect(self.select_input_file5) # added
            
        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children() # added
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        
        # See if OK was pressed

        if result:
            import glob
            filename1 = self.dlg.lineEdit_1.text()  
            filename2 = self.dlg.lineEdit_2.text()  
            filename3 = self.dlg.lineEdit_3.text()  
            filename4 = self.dlg.lineEdit_4.text()  
            filename5 = self.dlg.lineEdit_5.text()  
            filename6 = self.dlg.lineEdit_6.text()  
            Smooth = self.dlg.SmoothingFactor.text()
            Interval = self.dlg.ContourInterval.text()
            Resolution = self.dlg.ResolutionOut.text()
            if Smooth == "":
                Smooth = "7"
            if Interval == "":
                Interval = "10"
            if Resolution == "":
                Resolution = "100"
            if self.dlg.DoInterpolate.isChecked() == True:
                DoInterp=1
            else:
                DoInterp=0
            if self.dlg.DoSlope.isChecked() == True:
                DoSlope=1
            else:
                DoSlope=0
            if self.dlg.DoContours.isChecked() == True:
                DoContours=1
            else:
                DoContours=0
            if self.dlg.DoRoughness.isChecked() == True:
                DoRoughness=1
            else:
                DoRoughness=0
            if self.dlg.DoHiRes.isChecked() == True:
                DoHiRes=1
            else:
                DoHiRes=0
             
            newdir = str(os.path.dirname(filename1) + "/tempBATHYfiles")
            if not os.path.exists(newdir):
                os.mkdir(newdir)
            
            alphabet = 'ZYXWVUTSRQPONMLKJIHGFEDCBA0987654321'
            rand = alphabet[random.randint(1,25)] + alphabet[random.randint(1,35)] + alphabet[random.randint(1,35)] + alphabet[random.randint(1,35)]
            
            if DoInterp:
                # Interpolate output to filename2
                newInterp = filename2
                processing.run("gdal:fillnodata", {'INPUT':filename1,'BAND':1,'DISTANCE':7,'ITERATIONS':0,'NO_MASK':False,'MASK_LAYER':None,'OPTIONS':'','EXTRA':'','OUTPUT':filename2})
            else:
                newInterp = filename1

            if DoSlope:
                # Calculate Slope output to filename3 but use newInterp
                newSlope = newdir + "/newSlope"+rand+".img"
                processing.run("native:slope", {'INPUT':newInterp,'Z_FACTOR':1,'OUTPUT':filename3})
                fname = os.path.dirname(str(filename3))
                vlayer = QgsRasterLayer(str(filename3), str(filename3[len(fname)+1:]))
                QgsProject.instance().addMapLayer(vlayer)
                
            if DoInterp:
                fname = os.path.dirname(str(newInterp))
                vlayer = QgsRasterLayer(str(newInterp), str(filename2[len(fname)+1:]))
                QgsProject.instance().addMapLayer(vlayer)

            if DoContours:
                # make contours output to filename4 but use newInterp
                dict = processing.run("native:rasterlayerproperties", {'INPUT':newInterp,'BAND':1})
                cellsizeX = float(dict['PIXEL_WIDTH'])
                cutoff = cellsizeX * 10.0
                newContour1 = newdir + "/newSlope1"+rand+".shp"
                newContour2 = newdir + "/newSlope2"+rand+".shp"
                processing.run("gdal:contour", {'INPUT':newInterp,'BAND':1,'INTERVAL':Interval,'FIELD_NAME':'ELEV','CREATE_3D':False,'IGNORE_NODATA':False,'NODATA':None,'OFFSET':0,'EXTRA':'','OUTPUT':newContour1})
                processing.run("qgis:exportaddgeometrycolumns", {'INPUT':newContour1,'CALC_METHOD':0,'OUTPUT':newContour2})
                processing.run("native:extractbyattribute", {'INPUT':newContour2,'FIELD':'length','OPERATOR':2,'VALUE':cutoff,'OUTPUT':filename4})
                fname = os.path.dirname(str(filename4))
                vlayer = QgsVectorLayer(str(filename4), str(filename4[len(fname)+1:]), "ogr")
                QgsProject.instance().addMapLayer(vlayer)

            if DoRoughness:
                # Calculate Roughness output to filename5 but use newInterp
                newRoughness = newdir + "/newRoughness"+rand+".img"
                processing.run("gdal:roughness", {'INPUT':newInterp,'BAND':1,'COMPUTE_EDGES':False,'OPTIONS':'','OUTPUT':filename5})
                fname = os.path.dirname(str(filename5))
                vlayer = QgsRasterLayer(str(filename5), str(filename5[len(fname)+1:]))
                QgsProject.instance().addMapLayer(vlayer)

            if DoHiRes:
                # Make interpolated output to filename6 but use newInterp
                newHiRes = newdir + "/newHiRes"+rand+".gpkg"
                outTin = newdir + "/outTin"+rand+".img"
                processing.run("native:pixelstopoints", {'INPUT_RASTER':newInterp,'RASTER_BAND':1,'FIELD_NAME':'VALUE','OUTPUT':newHiRes})
                expr = newHiRes + '|layername=newHiRes'+rand+'::~::0::~::1::~::0'
                extent = QgsVectorLayer(newdir + "/newHiRes"+rand+".gpkg").extent()
                crs = QgsVectorLayer(newdir + "/newHiRes"+rand+".gpkg").crs()
                processing.run("qgis:tininterpolation", {'INTERPOLATION_DATA':expr,'METHOD':0,'EXTENT':extent,'PIXEL_SIZE':Resolution,'OUTPUT':outTin})
                tempName = os.path.split(newInterp)[1]
                name = tempName.split('.')[0]
                InRef = name + '@1'
                tempName = os.path.split(outTin)[1]
                name = tempName.split('.')[0]
                TinRef = name + '@1'
                expression = '"' + TinRef + '" * "' + InRef + '" / "' + InRef + '"'
                processing.run("qgis:rastercalculator", {'EXPRESSION':expression,'LAYERS':[outTin],'CELLSIZE':None,'EXTENT':None,'CRS':None,'OUTPUT':filename6})
                fname = os.path.dirname(str(filename6))
                vlayer = QgsRasterLayer(str(filename6), str(filename6[len(fname)+1:]))
                QgsProject.instance().addMapLayer(vlayer)
            pass

